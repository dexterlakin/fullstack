{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","persons","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","deletePerson","delete","Filter","props","value","searchTerm","onChange","handleSearch","PersonForm","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Person","person","name","number","onClick","window","confirm","personService","setPersons","filter","p","console","log","allPersons","catch","error","setNotificationMessage","setTimeout","handleDeleteClick","Persons","filteredPersons","toLowerCase","includes","map","Notification","message","className","App","useState","setNewName","setNewNumber","setSearchTerm","notificationMessage","useEffect","initialPersons","event","target","preventDefault","some","duplicate","find","alert","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dbfe3496.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst persons = { getAll, create, update, deletePerson }\n\nexport default persons\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst Filter = (props) => {\n\n  return(\n  <div>\n    <form>\n      <input\n        value={props.searchTerm}\n        onChange={props.handleSearch}\n      />\n    </form>\n  </div>\n  )\n}\n\nconst PersonForm = (props) => {\n\n  return(\n  <div>\n    <form onSubmit={props.addPerson}>\n        <div>\n          name: <input\n            value={props.newName}\n            onChange={props.handleNameChange}\n            />\n        </div>\n        <div>\n          number: <input\n            value={props.newNumber}\n            onChange={props.handleNumberChange}\n            />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  </div>\n  )\n}\n\nconst Person = ({ props, person }) => {\n\n  const handleDeleteClick = (props) => {\n    var deleteConfirm = window.confirm(`Delete ${person.name} ?`);\n    if(deleteConfirm) {\n      personService\n      .deletePerson(person.id)\n      .then(response => {\n        props.setPersons(props.persons.filter(p => p.id !== props.id))\n        console.log(`deleted ${person.name}`)\n        personService\n        .getAll()\n        .then(allPersons => {\n          props.setPersons(allPersons)\n        })\n      })\n      .catch(error => {\n        props.setNotificationMessage(`${person.name} was already deleted from server`)\n        setTimeout(() => {\n          props.setNotificationMessage(null)\n        }, 5000)\n        props.setPersons(props.persons.filter(p => p.id !== person.id))\n      })\n    }\n  }\n\n  return(\n    <div>\n      <p>{person.name} {person.number} <button onClick={() => handleDeleteClick(props)}>delete</button></p>\n    </div>\n  )\n}\n\n\nconst Persons = (props) => {\n  var filteredPersons = props.persons.filter(person => person.name.toLowerCase().includes(props.searchTerm.toLowerCase()))\n\n  return(\n    <div>\n      {filteredPersons.map((person) =>\n      <div key={person.name}>\n        <Person\n          props={props}\n          person={person}\n        />\n      </div>\n      )}\n    </div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  let className='notification'\n  if (message.includes('already deleted from server')) {\n    className='error'\n  }\n  return (\n    <div className={className}>\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchTerm, setSearchTerm ] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const person = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.some(p => p.name === newName)) {\n\n      console.log('duplicate')\n\n      var duplicate = persons.find(p => p.name === newName)\n\n      if (duplicate.number === newNumber) {\n        window.alert(`${duplicate.name} is already added to phonebook`);\n      } else {\n        var updateConfirm = window.confirm(`${duplicate.name} is already added to phonebook, replace the old number with a new one?`);\n        if (updateConfirm) {\n          personService\n          .update(duplicate.id, person)\n          .then(returnedPerson => {\n            setNewName('')\n            setNewNumber('')\n            personService\n            .getAll()\n            .then(allPersons => {\n              setPersons(allPersons)\n            })\n          })\n        }\n      }\n      return;\n    }\n\n  personService\n    .create(person)\n    .then(returnedPerson => {\n      setPersons(persons.concat(returnedPerson))\n      setNewName('')\n      setNewNumber('')\n      setNotificationMessage(`Added ${person.name}`)\n      setTimeout(() => {\n        setNotificationMessage(null)\n      }, 5000)\n    })\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearch = (event) => {\n    setSearchTerm(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Filter\n        handleSearch={handleSearch}\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n      />\n\n      <h3>Add a new</h3>\n\n      <PersonForm\n        persons={persons}\n        setPersons={setPersons}\n        newName={newName}\n        setNewName={setNewName}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n        addPerson={addPerson}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h3>Number</h3>\n\n      <Persons\n        setNotificationMessage={setNotificationMessage}\n        setPersons={setPersons}\n        persons={persons}\n        searchTerm={searchTerm}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}